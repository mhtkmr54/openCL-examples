//before OpenGL
//----------------------------------------------------------
#include "Fluidity.hpp"
#include <GL/glut.h>




int main(int argc, char *argv[])
{
     std::string line;
    std::string kersource="";
    std::ifstream myfile ("Fluidity.cl");
    if (myfile.is_open())
    {
        while ( getline (myfile,line) )
        {
            kersource=kersource+line;
            kersource=kersource+"\n";
        }
        myfile.close();
    }  
    const char* kernelSource  = kersource.c_str();
    
    
    const cl_float weight[9] = {4.0 / 9.0, 1.0 / 9.0, 1.0 / 9.0, 1.0 / 9.0, 1.0 / 9.0, 1.0 / 36.0, 1.0 / 36.0, 1.0 / 36.0, 1.0 / 36.0};
    cl::Buffer d_if1234;
    cl::Buffer d_if5678;
    cl::Buffer   d_if0;
    cl::Buffer d_of1234;
    cl::Buffer d_of5678;
    cl::Buffer   d_of0;
    cl::Buffer   d_rho;
    cl::Buffer d_weight;
    
    size_t bytes = n*n*sizeof(cl_float4);

    h_if1234 = new cl_float4[n*n];
    h_if5678 = new cl_float4[n*n];
    h_if0    = new cl_float[n*n];
    h_of1234 = new cl_float4[n*n];
    h_of5678 = new cl_float4[n*n];
    h_of0    = new cl_float[n*n];
    h_rho    = new cl_float[n*n];

    for(int i=0;i<n*n;i++)
    {
        h_if1234[i] = {i % 1024 , i % 512 , i % 256 , i%1024};
        h_if5678[i] = {i % 128  , i % 512 , i % 1024, i% 512};
        h_if0[i] = i%80;
    }

    cl_int err = CL_SUCCESS;
    cl::STRING_CLASS buildlog;
    cl::Program program_;
    std::vector<cl::Device> devices;

    clock_t start;
    double duration;
    start = clock(); 
    try 
    {
        std::vector<cl::Platform> platforms;
        cl::Platform::get(&platforms);
        if (platforms.size() == 0) {
            std::cout << "Platform size 0\n";
            return -1;
        }
           cl_context_properties properties[] =
           { CL_CONTEXT_PLATFORM, (cl_context_properties)(platforms[0])(), 0};
        cl::Context context(CL_DEVICE_TYPE_GPU, properties);
        devices = context.getInfo<CL_CONTEXT_DEVICES>();
 
        cl::CommandQueue queue(context, devices[0], 0, &err);

        d_if1234 = cl::Buffer(context, CL_MEM_READ_ONLY, bytes);
        d_if5678 = cl::Buffer(context, CL_MEM_READ_ONLY, bytes);
        d_if0    = cl::Buffer(context, CL_MEM_READ_ONLY, bytes/4);
        d_of1234 = cl::Buffer(context, CL_MEM_WRITE_ONLY, bytes);
        d_of5678 = cl::Buffer(context, CL_MEM_WRITE_ONLY, bytes);
        d_of0    = cl::Buffer(context, CL_MEM_WRITE_ONLY, bytes/4);
        d_rho    = cl::Buffer(context, CL_MEM_WRITE_ONLY, bytes/4);
        d_weight = cl::Buffer(context, CL_MEM_READ_ONLY, 9*sizeof(cl_float));
        for(int iter =0;iter<100;iter++)
        {

            queue.enqueueWriteBuffer(d_if1234, CL_TRUE, 0, bytes, h_if1234);
            queue.enqueueWriteBuffer(d_if5678, CL_TRUE, 0, bytes, h_if5678);
            queue.enqueueWriteBuffer(d_if0   , CL_TRUE, 0, bytes/4, h_if0);

            cl::Program::Sources source(1,
                std::make_pair(kernelSource,strlen(kernelSource)));
            program_ = cl::Program(context, source);
            program_.build(devices);

            cl::Kernel kernel(program_, "fluidify", &err);

            kernel.setArg(0, d_if1234);
            kernel.setArg(1, d_if5678);
            kernel.setArg(2, d_if0);
            kernel.setArg(3, d_of1234);
            kernel.setArg(4, d_of5678);
            kernel.setArg(5, d_of0);
            kernel.setArg(6, d_rho);
            kernel.setArg(7, ttau);
            kernel.setArg(8, d_weight);
            kernel.setArg(9, n);
        
            cl::NDRange localSize(16,16);
            cl::NDRange globalSize(n*n);

        
            cl::Event event;
            queue.enqueueNDRangeKernel(
                kernel,
                cl::NullRange,
                globalSize,
                localSize,
                NULL,
                &event);

            event.wait();

            queue.enqueueReadBuffer(d_of1234, CL_TRUE, 0, bytes, h_of1234);
            queue.enqueueReadBuffer(d_of1234, CL_TRUE, 0, bytes, h_of1234);
            queue.enqueueReadBuffer(d_of0   , CL_TRUE, 0, bytes/4, h_of0);
            queue.enqueueReadBuffer(d_rho   , CL_TRUE, 0, bytes/4, h_rho);

            memcpy(h_if0    , h_of0    , bytes/4);
            memcpy(h_if1234 , h_of1234 , bytes)  ;
            memcpy(h_if5678 , h_of5678 , bytes)  ;
        }
    }
    catch (cl::Error err) {
         std::cerr
            << "ERROR: "<<err.what()<<"("<<err.err()<<")"<<std::endl;
    }

    duration = (clock() - start)/(double)CLOCKS_PER_SEC;
    std::cout<<"Duration: "<<duration<<"\n";

    buildlog = program_.getBuildInfo<CL_PROGRAM_BUILD_LOG>(devices[0], NULL);
        std::ofstream logfile ("Fluiditylog.txt");
        logfile<<buildlog;
        logfile.close();

    duration = (clock() - start)/(double)CLOCKS_PER_SEC;
    std::cout<<"Final Duration: "<<duration<<"\n";    

    delete(h_of1234);
    delete(h_if5678);
    delete(h_if0);
}
